@page "/"
@using Final_Project.Backend;
@using Microsoft.AspNetCore.Cors.Infrastructure;
@using Microsoft.Extensions.Options;
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.FileProviders;
@using System.IO;
@using System.Linq;
@using Tewr.Blazor.FileReader;
@inject IFileReaderService service;
@inject IAudioService audioService;
@inject IJSRuntime jsRuntime;
@rendermode InteractiveServer

<PageTitle>Blazor Music Player</PageTitle>

<header class="text-center">
    <h1 class="jersey-10-regular">Blazor Music Player</h1>
    <h4>It's Time to Jam</h4>
</header>

<div class="text-center">
    <div>
        <InputFile OnChange="SubmitAsync" multiple></InputFile><br />
    </div>

    @if (!String.IsNullOrEmpty(message))
    {
        <p>@message</p>
    }

    <div>
        <button @onclick="ShowUpdate">Update</button>
        <button @onclick="ShowDelete">Delete</button><br /><br />

        @if (isUpdate && !isDelete)
        {
            <p>
                Enter Song ID and upload song(s) to replace it:
                <input type="text" @bind=update style="color: black;" />
                <InputFile OnChange="UpdateAsync"></InputFile><br /><br />
                <button @onclick="CancelAsync">Cancel</button>
            </p>
        }

        @if (isDelete && !isUpdate)
        {
            <p>
                Song to delete:
                <input type="text" @bind="delete" style="color: black;" />
                <button @onclick="DeleteAsync">Confirm</button><br /><br />
                <button @onclick="CancelAsync">Cancel</button>
            </p>
        }

        <button @onclick="TogglePlayPauseAsync">Play/Stop</button>
        <button @onclick="() => SkipAsync(currentIndex)">Skip</button>
        <button @onclick="() => PreviousAsync(currentIndex)">Previous</button>
    </div>
    <hr />
    <table class="table table-dark">
        <thead>
            <tr>
                <th scope="col">Current Playlist</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var song in songs)
            {
                <tr>
                    <td>@song.Name ID: @song.Id</td>
                </tr>
            }
        </tbody>
    </table><br />
</div>
<script src="js/site.js"></script>

@code {
    private IEnumerable<Song>? songs;

    private bool isPlaying = false;
    private bool isUpdate = false;
    private bool isDelete = false;

    private int currentIndex = 0;

    private string? message;
    private string? update;
    private string? delete;

    protected override async Task OnInitializedAsync()
    {
        songs = await audioService.GetSongsAsync();
    }

    private async Task SubmitAsync(InputFileChangeEventArgs e)
    {
        try
        {
            foreach (var file in e.GetMultipleFiles())
            {
                using var memory = new MemoryStream();
                await file.OpenReadStream(file.Size).CopyToAsync(memory);
                var buffer = memory.ToArray();

                FormFile form = new(
                    new MemoryStream(buffer),
                    0,
                    buffer.Length,
                    file.Name,
                    file.Name
                );

                var songId = await audioService.AddSongAsync(form);
                songs = await audioService.GetSongsAsync();
            }
        }
        catch (System.TimeoutException tex)
        {
            message = $"Timeout error: {tex.Message}";
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void ShowUpdate()
    {
        isUpdate = true;
        isDelete = false;
        update = "";
        message = "";
    }


    private async Task UpdateAsync(InputFileChangeEventArgs e)
    {
        try
        {
            if (!string.IsNullOrEmpty(update))
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    var buffer = new byte[file.Size];
                    var memoryStream = new MemoryStream();

                    using var stream = file.OpenReadStream(file.Size);
                    int bytesRead;
                    while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                    {
                        await memoryStream.WriteAsync(buffer, 0, bytesRead);
                    }

                    var form = new FormFile(
                        memoryStream,
                        0,
                        memoryStream.Length,
                        file.Name,
                        file.Name
                    );

                    await audioService.UpdateSongAsync(new Guid(update), form);
                    songs = await audioService.GetSongsAsync();
                }

                message = $"Successfully updated song with ID: {update}";
            }
            else
            {
                message = "Please enter a valid song ID!";
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
        finally
        {
            update = null;
            isUpdate = false;
            StateHasChanged();
        }
    }

    private void ShowDelete()
    {
        isDelete = true;
        isUpdate = false;
        delete = "";
        message = "";
    }

    private async Task DeleteAsync()
    {
        try
        {
            var deleteSong = songs.FirstOrDefault(s => s.Name.Equals(delete, StringComparison.OrdinalIgnoreCase));

            if(deleteSong != null)
            {

                await audioService.DeleteSongAsync(deleteSong.Id);
                songs = await audioService.GetSongsAsync();
                message = $"Success! Deleted {deleteSong.Name}.";
            }
            else
            {
                message = "Song not found!";
            }
        }
        catch(Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
        finally
        {
            delete = null;
            isDelete = false;
            StateHasChanged();
        }
    }

    private async Task PlayAsync(int index)
    {
        try
        {
            var next = songs.ElementAtOrDefault(index);
            if(next != null)
            {
                await jsRuntime.InvokeVoidAsync("playAudio", next.Id);
                isPlaying = true;
                currentIndex = index;
                message = $"Playing {next.Name}";
            }
            else
            {
                message = "You gotta add a song first!";
            }
        }
        catch(Exception ex)
        {
            message = $"An error occurred: {ex.Message}.";
        }
    }

    private async Task PauseAsync()
    {
        try
        {
            await jsRuntime.InvokeVoidAsync("stopAudio"); 
            isPlaying = false;
            message = "";
        }
        catch(Exception ex)
        {
            message = $"An error occurred: {ex.Message}.";
        }
    }

    private async Task SkipAsync(int index)
    {
        try
        {
            if(index < songs.Count() - 1)
            {
                await PlayAsync(index + 1);
            }
            else
            {
                message = "No more songs to play!";
            }
        }
        catch(Exception ex)
        {
            message = $"An error occurred: {ex.Message}.";
        }
    }

    private async Task PreviousAsync(int index)
    {
        try
        {
            if(index > 0)
            {
                await PlayAsync(index - 1);
            }
            else
            {
                message = "No previous songs to play!";
            }
        }
        catch(Exception ex)
        {
            message = $"An error occurred: {ex.Message}.";
        }
    }

    private async Task TogglePlayPauseAsync()
    {
        if (isPlaying)
            await PauseAsync();

        else
            await PlayAsync(currentIndex);
    }

    private void CancelAsync()
    {
        isUpdate = false;
        isDelete = false;
        StateHasChanged();
    }
}